# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven

name: CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]
permissions:
  # This is required for requesting the OIDC token
  id-token: write
  # This is required for actions/checkout
  contents: read
  # Required for uploading code scanning.
  security-events: write
jobs:
  ci:
    env:
      BUILD_NUMBER: ${{ github.run_number }}
      BUILD_NAME: 'spring-petclinic'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '25' ]

    steps:
      # Checkout the code from the repository
      - uses: actions/checkout@v4
      # Set up JDK
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v5
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
          cache-dependency-path: '**/pom.xml'
      # Get the version from the pom.xml and set it as an environment variable
      - name: Set Release version env variable
        run: |
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      # Setup JFrog CLI 
      - name: Setup JFrog CLI
        id: setup-jfrog-cli
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: davpin/spring-petclinic@github
      # Configure JFrog CLI with our server details and configure maven and docker.
      - name: Configure JFrog CLI
        run: |
          jf c add my-jfrog-server --url $JF_URL --access-token ${{ steps.setup-jfrog-cli.outputs.jf-oidc-token }} 
          jf mvnc --repo-resolve-releases java-libs-release --repo-resolve-snapshots java-libs-snapshot --repo-deploy-snapshots java-libs-snapshot-local --repo-deploy-releases java-libs-release-local --use-wrapper=true
          jf docker login
      # Compile the code with JFrog CLI
      - name: Compile
        run: jf mvn -B compile --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER
      # Audit the code with JFrog Xray
      - name: Audit
        run: jf audit --mvn --fail=true --licenses --sca --sast --use-wrapper=true -watches LicenseWatch
      # Run the tests with JFrog CLI
      - name: Test 
        run: jf mvn -B test --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER
      # Authenticate the docker cli. is this needed??
      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JF_URL }}
          username: ${{ steps.setup-jfrog-cli.outputs.oidc-user }}
          password: ${{ steps.setup-jfrog-cli.outputs.oidc-token }}
      # Build the docker image with spring boot maven plugin
      - name: Docker_image
        run: jf mvn -B spring-boot:build-image -DskipTests --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER
      # Publish the artifact and docker image to JFrog Artifactory
      - name: Publish
        env:
          IMAGE_NAME: trialyin7lg.jfrog.io/clinic-docker/spring-petclinic:${{ env.RELEASE_VERSION }}
        run: |
          jf mvn install -DskipTests --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER
          jf docker push $IMAGE_NAME --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER
      # Run JFrog Xray scan on the built artifact and docker image, and publish the build info to Artifactory
      - name: Run Jfrog
        env:
          JFROG_CLI_LOG_LEVEL: DEBUG
        run: |
          #jf scan target/spring-petclinic-${{ env.RELEASE_VERSION }}.jar --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER
          jf build-scan $BUILD_NAME $BUILD_NUMBER 
          jf docker scan --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER
          # Publish build info
          jf rt build-publish $BUILD_NAME $BUILD_NUMBER --collect-env --collect-git-info --env-exclude "*password*;*secret*;*key*;*token*;*auth*"
